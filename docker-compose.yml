# version: "3.8"

services:
  fe:
    build:
      context: ./fe
      dockerfile: Dockerfile
    container_name: fe
    ports:
      - "5173:5173"
    volumes:
      - ./fe:/app # Gắn thư mục mã nguồn './frontend-app' trên host vào /app trong container FE
      - /app/node_modules # Một thủ thuật để ngăn host node_modules ghi đè container node_modules
    env_file:
      - ./fe/.env
    environment:
      NODE_ENV: development
    depends_on:
      - order-service
      - payment-service

  # Định nghĩa Order Service
  order-service:
    build:
      context: ./order-service # Đường dẫn tới thư mục chứa Dockerfile của order-service
      dockerfile: Dockerfile # Tên Dockerfile
    container_name: order-service
    ports:
      - "4001:4001" # Ánh xạ cổng: HOST_PORT:CONTAINER_PORT
    env_file:
      - ./order-service/.env # Tải biến môi trường từ file .env
    environment:
      NODE_ENV: production # Các biến môi trường không nhạy cảm hoặc không có trong .env
      # Ví dụ:
      PAYMENT_SERVICE_URL: "http://payment-service:4002" # Cách order-service giao tiếp với product-service
      REDIS_URL: redis://redis:6379

  # Định nghĩa Product Service
  payment-service:
    build:
      context: ./payment-service # Đường dẫn tới thư mục chứa Dockerfile của product-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "4002:4001" # Host sẽ dùng 4002, container vẫn chạy cổng 4001
    env_file:
      - ./payment-service/.env # Tải biến môi trường từ file .env
    environment:
      NODE_ENV: production
      REDIS_URL: redis://redis:6379

  # Ví dụ (TÙY CHỌN): Nếu bạn muốn Docker Compose tự khởi tạo và quản lý container Redis
  # Nếu bạn đã có một container Redis chạy sẵn và muốn giữ nguyên, bạn có thể bỏ qua phần này.
  # Nếu bạn đưa Redis vào đây, hãy sửa REDIS_HOST trong .env thành "redis" (tên service)
  redis:
    image: redis:7-alpine # Sử dụng image Redis nhẹ hơn
    container_name: redis # Đặt tên cho container Redis để dễ quản lý
    ports:
      - "6379:6379" # Ánh xạ cổng để bạn có thể truy cập Redis từ máy host nếu cần
    volumes:
      - redis_data:/data # Lưu trữ dữ liệu Redis bền vững
    healthcheck: # Kiểm tra sức khỏe của Redis
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
# Định nghĩa Volumes (chỉ cần nếu bạn dùng các dịch vụ có volumes như Redis ở trên)
volumes:
  redis_data:
